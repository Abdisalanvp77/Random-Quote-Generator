{"version":3,"sources":["components/Quote.js","App.js","index.js"],"names":["Quote","props","state","quotes","currentQuote","currentAuthor","colors","backGroundColor","generateRandomQuote","bind","tweetQuote","axios","get","then","data","res","setState","quote","author","document","body","style","backgroundColor","randomIndex","Math","floor","random","this","length","randomColorIndex","BASE_URL","window","open","id","className","icon","faQuoteLeft","color","faQuoteRight","title","href","onClick","target","size","faTwitter","Button","variant","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"+XAUqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,GACRC,aAAc,GACdC,cAAe,GACfC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACxJC,gBAAiB,QAErB,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAVH,E,gEAaE,IAAD,OAGhBE,IAAMC,IAFI,0IAGRC,MAAK,SAAAC,GACH,OAAOA,EAAKA,QAEdD,MAAM,SAAAE,GACH,EAAKC,SAAS,CACVb,OAAQY,EAAIZ,SAEhB,EAAKa,SAAS,CACXZ,aAAc,EAAKF,MAAMC,OAAO,GAAGc,MACnCZ,cAAe,EAAKH,MAAMC,OAAO,GAAGe,YAG3CC,SAASC,KAAKC,MAAMC,gBAAmB,S,4CAIxC,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKzB,MAAMC,OAAOyB,QAC3DC,EAAmBL,KAAKC,MAAMD,KAAKE,SAAWC,KAAKzB,MAAMI,OAAOsB,QACtED,KAAKX,SAAS,CACVZ,aAAcuB,KAAKzB,MAAMC,OAAOoB,GAAaN,MAC7CZ,cAAesB,KAAKzB,MAAMC,OAAOoB,GAAaL,OAC9CX,gBAAiBoB,KAAKzB,MAAMI,OAAOuB,KAEvCV,SAASC,KAAKC,MAAMC,gBAAmBK,KAAKzB,MAAMI,OAAOuB,K,mCAKzD,IAAMC,EAAW,yCAA2CH,KAAKzB,MAAME,aACvE2B,OAAOC,KAAKF,K,+BAIZ,IAAMhB,EAAO,CACTG,MAAOU,KAAKzB,MAAME,aAClBc,OAAQS,KAAKzB,MAAMG,eAGvB,OAEI,yBAAK4B,GAAG,WACJ,yBAAKA,GAAG,aACJ,yBAAKC,UAAU,cACX,kBAAC,IAAD,CAAiBC,KAAMC,IAAaf,MAAO,CAACgB,MAAOV,KAAKzB,MAAMK,mBAC9D,0BAAM0B,GAAG,OAAOZ,MAAO,CAACgB,MAAOV,KAAKzB,MAAMK,kBAAoBO,EAAKG,OACnE,kBAAC,IAAD,CAAiBkB,KAAMG,IAAcjB,MAAO,CAACgB,MAAOV,KAAKzB,MAAMK,oBAEnE,yBAAK2B,UAAU,gBAAf,KACM,0BAAMD,GAAG,SAASZ,MAAO,CAACgB,MAAOV,KAAKzB,MAAMK,kBAAmBO,EAAKI,SAE1E,yBAAKgB,UAAU,WAEX,uBACID,GAAG,cACHM,MAAM,oBACNC,KAAK,mCACLC,QAASd,KAAKjB,WACdgC,OAAO,UALX,IAKqB,kBAAC,IAAD,CAAiBC,KAAK,KAAKR,KAAMS,MALtD,eAOA,uBAAIJ,KAAK,iCAAiCH,MAAM,UAAUJ,GAAG,eAAeM,MAAM,6BAA6BG,OAAO,SAASD,QAAS,WAAOV,OAAOC,KAAK,qCAG3J,kBAACa,EAAA,EAAD,CAAQxB,MAAO,CAACC,gBAAiBK,KAAKzB,MAAMK,iBAAkBuC,QAAQ,YAAYT,MAAM,UAAWJ,GAAG,YAAYQ,QAASd,KAAKnB,qBAAhI,oB,GAhFWuC,c,iBCKpBC,MAXf,WACE,OACE,yBAAKd,UAAU,OAEb,kBAAC,IAAD,MACA,oDACA,kBAAC,EAAD,QCJNe,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,W","file":"static/js/main.8935ea95.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from '@material-ui/core';\nimport axios from 'axios';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport './Quote.css';\n// import { Icon } from 'semantic-ui-react';\n\nexport default class Quote extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quotes: [],\n            currentQuote: '',\n            currentAuthor: '',\n            colors: ['#32a852', '#2f5439', '#242d2e', '#1f5d63', '#2e1852', '#170338', '#571350', '#1d7085', '#734511', '#36210a', '#527230', '#1e7385', '#734621', '#36310b'],\n            backGroundColor: '#333'\n        }\n        this.generateRandomQuote = this.generateRandomQuote.bind(this);\n        this.tweetQuote = this.tweetQuote.bind(this);\n    }\n\n    componentDidMount() {\n        let url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n\n        axios.get(url)\n         .then(data => {\n            return data.data;\n         })\n         .then( res => {\n             this.setState({\n                 quotes: res.quotes\n             })\n             this.setState({\n                currentQuote: this.state.quotes[0].quote,\n                currentAuthor: this.state.quotes[0].author\n             })\n         })\n         document.body.style.backgroundColor =  '#333';\n    }\n\n    generateRandomQuote() {\n        const randomIndex = Math.floor(Math.random() * this.state.quotes.length);\n        const randomColorIndex = Math.floor(Math.random() * this.state.colors.length);\n        this.setState({\n            currentQuote: this.state.quotes[randomIndex].quote,\n            currentAuthor: this.state.quotes[randomIndex].author,\n            backGroundColor: this.state.colors[randomColorIndex]\n        })\n        document.body.style.backgroundColor =  this.state.colors[randomColorIndex];\n        \n    }\n    \n    tweetQuote() {\n        const BASE_URL = 'https://twitter.com/intent/tweet?text=' + this.state.currentQuote;\n        window.open(BASE_URL);\n    }\n\n    render() {\n        const data = {\n            quote: this.state.currentQuote,\n            author: this.state.currentAuthor\n        }\n        \n        return (\n\n            <div id=\"wrapper\">\n                <div id=\"quote-box\">\n                    <div className=\"quote-text\">\n                        <FontAwesomeIcon icon={faQuoteLeft} style={{color: this.state.backGroundColor}} />\n                        <span id=\"text\" style={{color: this.state.backGroundColor}} >{data.quote}</span>\n                        <FontAwesomeIcon icon={faQuoteRight} style={{color: this.state.backGroundColor}} />\n                    </div>\n                    <div className=\"quote-author\">\n                        ~ <span id=\"author\" style={{color: this.state.backGroundColor}}>{data.author}</span>\n                    </div>\n                    <div className=\"buttons\">\n                        \n                        <a\n                            id=\"tweet-quote\" \n                            title=\"Tweet this quote!\"\n                            href=\"https://twitter.com/intent/tweet\"\n                            onClick={this.tweetQuote}\n                            target=\"_blank\"> <FontAwesomeIcon size=\"2x\" icon={faTwitter} />Tweet Quote\n                        </a>\n                        <a  href=\"https://embed.tumblr.com/share\" color=\"primary\" id=\"tumblr-quote\" title=\"Post this quote on tumblr!\" target=\"_blank\" onClick={() => {window.open('https://embed.tumblr.com/share')}}>\n                    \n                        </a>\n                        <Button style={{backgroundColor: this.state.backGroundColor}} variant=\"contained\" color=\"primary\"  id=\"new-quote\" onClick={this.generateRandomQuote}>New quote</Button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Quote from './components/Quote';\nimport ReactFCCtest from 'react-fcctest';\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <ReactFCCtest />\n      <h3>Random Quote Machine</h3>\n      <Quote />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}